using System;
using System.Xml;
using System.Collections.Generic;

namespace RLToolkit.Basic
{
    public class XmlConfigSystem : IConfigSystem
    {
        // update this when we change the master version
        public const int LATEST_MODEL_VERSION = 1;

        public Dictionary<string, string> readConfig(string path)
        {
            this.Log().Debug("Reading configuration from: " + path);
            Dictionary<string, string> dic = new Dictionary<string, string>();
            int currentModelVersion = 1; // default model

            XmlDocument fileContent = XmlHelper.Read(System.IO.Path.GetFileName(path), System.IO.Path.GetDirectoryName(path));
            foreach (XmlNode parent in fileContent.ChildNodes)
            {
                if (parent.Name.ToLower() == "cfgmanager")
                {
                    foreach (XmlNode node in parent.ChildNodes)
                    {
                        if (node.Name.ToLower() == "parameters")
                        {
                            foreach (XmlNode input in node.ChildNodes)
                            {
                                if (input.Name.ToLower() == "modelversion")
                                {
                                    // try to get the new model version
                                    Int32.TryParse(input.InnerText, out currentModelVersion);
                                }
                            }
                        }

                        if (node.Name.ToLower() == "configsystem")
                        {
                            switch(currentModelVersion)
                            {
                                case 1:
                                {
                                    foreach (XmlNode input in node.ChildNodes)
                                    {
                                        this.Log().Info(string.Format("Adding configuration line: {0} = {1}", input.Name, input.InnerText));
                                        dic.Add(input.Name, input.InnerText);
                                    }
                                    break;
                                }
                                default:
                                {
                                    //unknown model version, exception
                                    throw new ArgumentOutOfRangeException("ModelVersion");
                                }
                            }
                        }
                    }
                }
            }

            return dic;
        }

        public void writeConfig(Dictionary<string, string> content, string path)
        {
            this.Log().Debug("Writing configuration to: " + path + Environment.NewLine + "with " + content.Count.ToString() + " lines of data");

            // build the output
            XmlDocument output = new XmlDocument();
            XmlComment commentInfo = output.CreateComment("Xml generated by the CfgManager");
            output.AppendChild(commentInfo);

            XmlElement masterNode = output.CreateElement("CfgManager");

            // prepare the parameters
            XmlElement configNode = output.CreateElement("Parameters");
            XmlElement versionNode = output.CreateElement("ModelVersion");

            versionNode.InnerXml = LATEST_MODEL_VERSION.ToString();
            configNode.AppendChild(versionNode);

            // prepare the values
            XmlElement valueNode = output.CreateElement("ConfigSystem");
            foreach (KeyValuePair<string,string> pair in content)
            {
                XmlElement cfg = output.CreateElement(pair.Key);
                cfg.InnerText = pair.Value;

                this.Log().Debug(string.Format("About to write to xml: {0} = {1}", cfg.Name, cfg.InnerText));
                valueNode.AppendChild(cfg);
            }

            // make the structure
            masterNode.AppendChild(configNode);
            masterNode.AppendChild(valueNode);
            output.AppendChild(masterNode);


            XmlHelper.Write(output, System.IO.Path.GetFileName(path), System.IO.Path.GetDirectoryName(path));
        }
    }
}